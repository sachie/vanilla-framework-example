{"version":3,"sources":["utils/texts.js","components/PostCard/index.js","utils/constants.js","services/postService.js","pages/Home/index.js","App.js","index.js","components/PostCard/postCard.module.scss","pages/Home/home.module.scss","pages/pages.module.scss"],"names":["title","by","loadingPosts","errorFetchingPosts","error","sachie","on","PostCard","topic","postLink","imageSrc","authorName","authorLink","date","category","formattedDate","Date","toLocaleDateString","year","month","day","className","styles","card","content","href","src","alt","linkText","info","messages","footer","memo","home","posts","githubProfile","getPosts","a","fetch","constants","response","ok","Error","json","renderContent","isLoading","text","spinner","severity","map","post","topicDetails","embeddedData","_embedded","authorDetails","author","find","id","name","link","categories","tags","topics","categoryId","length","categoryDetails","cat","topicId","top","tagId","tag","undefined","findEmbeddedDetails","rendered","featured_media","Home","useQuery","refetchOnWindowFocus","data","pageStyles","container","subtitle","main","queryClient","QueryClient","App","client","path","element","ReactDOM","render","document","querySelector","module","exports"],"mappings":"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","file":"static/js/main.afc9f49f.chunk.js","sourcesContent":["// Contains texts shown on pages. This file can be used for internationalization.\n\nexport default {\n  common: {\n    title: 'Vanilla Framework Example',\n    by: 'By',\n  },\n  mainPage: {\n    loadingPosts: 'Loading posts...',\n    errorFetchingPosts:\n      'An unexpected error occurred while fetching posts, please try again later.',\n    error: 'Error',\n    sachie: 'Sachie',\n  },\n  card: {\n    on: 'on',\n  },\n};\n","import { memo } from 'react';\nimport { Card, Link } from '@canonical/react-components';\nimport PropTypes from 'prop-types';\nimport messages from 'utils/texts';\nimport styles from './postCard.module.scss';\n\n/**\n * PostCard component.\n * Uses Card and Link from Vanilla Framework, with custom styling.\n */\nconst PostCard = ({ topic, title, postLink, imageSrc, authorName, authorLink, date, category }) => {\n  const formattedDate = new Date(date).toLocaleDateString('en-UK', {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric',\n  });\n\n  return (\n    <Card title={topic} className={styles.card}>\n      <hr />\n      <div className={styles.content}>\n        <Link href={postLink}>\n          <img src={imageSrc} alt=\"Post thumbnail\" />\n          <h4 className={styles.linkText}>{title}</h4>\n        </Link>\n        <div className={styles.info}>\n          {messages.common.by} <Link href={authorLink}>{authorName}</Link> {messages.card.on}{' '}\n          {formattedDate}\n        </div>\n      </div>\n      <hr />\n      <div className={styles.footer}>{category}</div>\n    </Card>\n  );\n};\n\nPostCard.propTypes = {\n  topic: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  postLink: PropTypes.string.isRequired,\n  imageSrc: PropTypes.string.isRequired,\n  authorName: PropTypes.string.isRequired,\n  authorLink: PropTypes.string.isRequired,\n  date: PropTypes.string.isRequired,\n  category: PropTypes.string.isRequired,\n};\n\nexport default memo(PostCard);\n","// Contains constants for use through the rest of the code.\n\nexport default {\n  paths: {\n    home: '/',\n  },\n  endpoints: {\n    posts: 'https://people.canonical.com/~anthonydillon/wp-json/wp/v2/posts.json',\n  },\n  links: {\n    githubProfile: 'https://github.com/sachie',\n  },\n};\n","// Service functions related to Posts.\n\nimport constants from 'utils/constants';\n\n/**\n * Get posts function.\n *\n * @returns Parsed data or Error.\n */\nexport const getPosts = async () => {\n  const response = await fetch(constants.endpoints.posts);\n\n  if (!response.ok) {\n    throw new Error('Network error');\n  }\n  return response.json();\n};\n\n/**\n * Save posts function (not implemented).\n */\nexport const savePosts = async () => {\n  throw new Error('Not implemented');\n};\n","import { memo } from 'react';\nimport { useQuery } from 'react-query';\nimport { Spinner, Notification, Link } from '@canonical/react-components';\nimport PostCard from 'components/PostCard';\nimport { getPosts } from 'services/postService';\nimport constants from 'utils/constants';\nimport messages from 'utils/texts';\nimport pageStyles from 'pages/pages.module.scss';\nimport styles from './home.module.scss';\n\n/**\n * Finds author, topic and category details from embedded data in a post.\n *\n * @param {*} post Data from a single post.\n * @returns Author details, topic name and category name.\n */\nconst findEmbeddedDetails = post => {\n  // eslint-disable-next-line no-underscore-dangle\n  const embeddedData = post._embedded;\n\n  const authorDetails = embeddedData.author\n    ? embeddedData.author.find(author => author.id === post.author)\n    : { name: 'anonymous', link: '' };\n\n  const [categories, tags, topics] = embeddedData['wp:term'];\n\n  const categoryId = post.categories.length && post.categories[0];\n  const categoryDetails = categoryId && categories.find(cat => cat.id === categoryId);\n\n  const topicId = post.topic.length && post.topic[0];\n  let topicDetails;\n  if (topicId) {\n    topicDetails = topicId && topics.find(top => top.id === topicId);\n  } else {\n    // If topic data is missing, use a tag name instead.\n    const tagId = post.tags.length && post.tags[0];\n    topicDetails = tagId && tags.find(tag => tag.id === tagId);\n  }\n\n  return {\n    authorDetails,\n    category: categoryDetails ? categoryDetails.name : undefined,\n    topic: topicDetails ? topicDetails.name : undefined,\n  };\n};\n\n/**\n * Decides what content to render, based on provided request data.\n * Uses Spinner and Notification from Vanilla Framework.\n *\n * @param {*} isLoading Is the query still running/retrying?\n * @param {*} posts Posts data.\n * @param {*} error Error data.\n * @returns Node, based on which content should show.\n */\nconst renderContent = (isLoading, posts, error) => {\n  if (isLoading) {\n    return <Spinner text={messages.mainPage.loadingPosts} className={styles.spinner} />;\n  }\n\n  if (error) {\n    return (\n      <Notification severity=\"negative\" title={messages.mainPage.error}>\n        {messages.mainPage.errorFetchingPosts}\n      </Notification>\n    );\n  }\n\n  return posts.map(post => {\n    const { authorDetails, category, topic } = findEmbeddedDetails(post);\n\n    return (\n      <PostCard\n        key={post.id}\n        topic={topic}\n        title={post.title.rendered}\n        postLink={post.link}\n        imageSrc={post.featured_media}\n        authorName={authorDetails.name}\n        authorLink={authorDetails.link}\n        date={post.date}\n        category={category}\n      />\n    );\n  });\n};\n\n/**\n * Home Page component.\n * Uses a react-query call to fetch Post data.\n */\nconst Home = () => {\n  const {\n    isLoading,\n    data: posts,\n    error,\n  } = useQuery('posts', getPosts, {\n    refetchOnWindowFocus: false, // To avoid unnecessary requests.\n  });\n\n  return (\n    <div className={pageStyles.container}>\n      <h1>{messages.common.title}</h1>\n      <h3 className={styles.subtitle}>\n        {messages.common.by}{' '}\n        <Link href={constants.links.githubProfile}>{messages.mainPage.sachie}</Link>\n      </h3>\n      <div className={styles.main}>{renderContent(isLoading, posts, error)}</div>\n    </div>\n  );\n};\n\nexport default memo(Home);\n","import { QueryClient, QueryClientProvider } from 'react-query';\nimport { Routes, Route } from 'react-router-dom';\nimport Home from 'pages/Home';\nimport constants from 'utils/constants';\n\nconst queryClient = new QueryClient();\n\nconst App = () => {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <Routes>\n        <Route path={constants.paths.home} element={<Home />} />\n      </Routes>\n    </QueryClientProvider>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport App from 'App';\n\nimport './assets/styles/index.scss';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.querySelector('#root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"primary-color\":\"#886281\",\"secondary-color\":\"#a87ca0\",\"text-color-muted\":\"#6e6e6e\",\"text-color-link\":\"#1f95cd\",\"text-color-link-active\":\"#1678a5\",\"card\":\"postCard_card__1c_pw\",\"content\":\"postCard_content__oRDpz\",\"linkText\":\"postCard_linkText__2ERE9\",\"info\":\"postCard_info__2D3Jd\",\"footer\":\"postCard_footer__1s1Zr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"home_main__37xpR\",\"subtitle\":\"home_subtitle__3zcNg\",\"spinner\":\"home_spinner__3azy_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"pages_container__2OItd\"};"],"sourceRoot":""}